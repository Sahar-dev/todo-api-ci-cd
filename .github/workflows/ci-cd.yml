name: CI/CD Pipeline with Quality Gates

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  quality-gates:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    # 🧹 Quality Gate 1: Linting
    - name: Run flake8 linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # 🔒 Quality Gate 2: Security Scan
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: 0   # don't fail the build, just report

    # 🧪 Quality Gate 3: Unit Tests with Coverage
    - name: Run unit tests with pytest
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=term

    - name: Extract Coverage %
      id: coverage
      run: |
        coverage=$(grep -oP 'line-rate="\\K[0-9.]+' coverage.xml | head -1)
        percent=$(python -c "print(int(float($coverage)*100))")
        echo "COVERAGE=$percent" >> $GITHUB_ENV

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    # 🐳 Quality Gate 4: Docker Build
    - name: Build Docker image
      run: docker build -t todo-api:latest .

    # 🔒 Quality Gate 5: Docker Scan
    - name: Scan Docker image
      run: docker scan --accept-license todo-api:latest || true

    # 📋 Add Summary for Quality Gates
    - name: Add summary
      run: |
        echo "## 📋 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Gate | Description | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧹 Linting | Code style & bug check with flake8 | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | Dependency scan with Trivy | ✅ Checked |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Unit Tests | Pytest + Coverage | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker Build | Image built successfully | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Docker Scan | Checked with docker scan | ✅ Checked |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Test Coverage: **${{ env.COVERAGE }}%**" >> $GITHUB_STEP_SUMMARY

  api-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build and run Docker container
      run: |
        docker build -t todo-api:latest .
        docker run -d -p 5000:5000 --name todo-app todo-api:latest

    - name: Wait for application to start
      run: timeout 60s bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'

    - name: Run basic API smoke tests
      run: |
        curl -f http://localhost:5000/health
        curl -f http://localhost:5000/api/todos
        echo "✅ Basic API tests passed"

    - name: Stop Docker container
      run: |
        docker stop todo-app || true
        docker rm todo-app || true

    - name: Add API summary
      run: |
        echo "## 🌐 API Smoke Tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Health endpoint working" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Todos endpoint working" >> $GITHUB_STEP_SUMMARY

  deployment:
    runs-on: ubuntu-latest
    needs: [quality-gates, api-tests]
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t todo-api:latest .

    - name: Log in to Docker Hub
      if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push Docker image
      if: ${{ secrets.DOCKERHUB_USERNAME != '' }}
      run: |
        docker tag todo-api:latest ${{ secrets.DOCKERHUB_USERNAME }}/todo-api:latest
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/todo-api:latest

    - name: Add deployment summary
      run: |
        echo "## 🚀 Deployment Info" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Hub: \`${{ secrets.DOCKERHUB_USERNAME }}/todo-api:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🎉 Pipeline completed successfully!**" >> $GITHUB_STEP_SUMMARY
